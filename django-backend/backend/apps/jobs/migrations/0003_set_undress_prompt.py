# Generated by Django 3.2.22 on 2023-12-27

from django.db import migrations, models
import django.db.models.deletion


def forwards_func(apps, schema_editor):
    Filter = apps.get_model('jobs', 'Filter')
    # Category: Female

    female_undress = Filter.objects.get(id=1)
    female_undress.raw_prompt = (
        'beautiful naked female body'
    )
    female_undress.raw_negative_prompt = (
        '((clothing)), (monochrome:1.3), (deformed, distorted, disfigured:1.3), '
        '(hair), jeans, tattoo, wet, water, clothing, shadow, 3d render, cartoon, '
        '((blurry)), duplicate, ((duplicate body parts)), (disfigured), (poorly drawn), '
        '((missing limbs)), logo, signature, text, words, low res, boring, artifacts, '
        'bad art, gross, ugly, poor quality, low quality, poorly drawn, bad anatomy, wrong anatomy'
    )
    female_undress.save()

    female_bra = Filter.objects.get(id=2)
    female_bra.raw_prompt = (
        'RAW photo of a woman in bra, standing, bra, underwear, realistic, correct anatomy, '
        'natural anatomy, sexy, highly detailed, natural skin tone'
    )
    female_bra.raw_negative_prompt = (
        '(monochrome:1.3), (deformed, distorted, disfigured:1.3), (hair), jeans, tattoo, wet, water, '
        'shadow, 3d render, cartoon, ((blurry)), duplicate, ((duplicate body parts)), (disfigured), '
        '(poorly drawn), ((missing limbs)), logo, signature, text, words, low res, boring, '
        'artifacts, bad art, gross, ugly, poor quality, low quality, poorly drawn, bad anatomy, '
        'wrong anatomy'
    )
    female_bra.save()

    female_bikini = Filter.objects.get(id=3)
    female_bikini.raw_prompt = (
        'RAW photo of a woman in tiny bikini, standing, sexy string bikini, realistic, '
        'correct anatomy, natural anatomy, sexy, highly detailed, natural skin tone'
    )
    female_bikini.raw_negative_prompt = (
        '(monochrome:1.3), (deformed, distorted, disfigured:1.3), (hair), jeans, tattoo, wet, water, '
        'shadow, 3d render, cartoon, ((blurry)), duplicate, ((duplicate body parts)), '
        '(disfigured), (poorly drawn), ((missing limbs)), logo, signature, text, words, '
        'low res, boring, artifacts, bad art, gross, ugly, poor quality, low quality, '
        'poorly drawn, bad anatomy, wrong anatomy'
    )
    female_bikini.save()

    female_tattoo = Filter.objects.get(id=4)
    female_tattoo.raw_prompt = (
        'RAW photo of a nude woman with beautiful sexy tattoo, naked, realistic, '
        'correct anatomy, natural anatomy, sexy, highly detailed, natural skin tone'
    )
    female_tattoo.raw_negative_prompt = (
        '((clothing)), (monochrome:1.3), (deformed, distorted, disfigured:1.3), '
        '(hair), jeans, wet, water, clothing, shadow, 3d render, cartoon, ((blurry)), '
        'duplicate, ((duplicate body parts)), (disfigured), (poorly drawn), '
        '((missing limbs)), logo, signature, text, words, low res, boring, '
        'artifacts, bad art, gross, ugly, poor quality, low quality, poorly drawn, '
        'bad anatomy, wrong anatomy'
    )
    female_tattoo.save()

    # Category: Male
    male_undress = Filter.objects.get(id=5)
    male_undress.raw_prompt = (
        '((a medium full shot photo of nude naked sexy man)), anatomically correct, '
        'beautiful, penerec, pubic hair, 4k, Canon 5D, ZEISS lens, high quality, '
        'highly detailed, photorealistic, natural penis, erect penis with scrotum, perfect testicles'
    )
    male_undress.raw_negative_prompt = (
        '(((clothes))), (((clothing))), (((underwear))), polaroid, black and white photo, '
        'vintage, b&w photo, monochrome, illustration, boring, ugly, disfigured, mutated, '
        'blurry, 3D render, drawing, painting, cartoon, anime, rendered, (small penis), '
        '(((penis in the hand))), (((anatomically wrong penis))), ((ugly penis)), (disformed testicles)'
    )
    male_undress.save()

    male_underwear = Filter.objects.get(id=6)
    male_underwear.raw_prompt = (
        'RAW photo of a man in monocolor underwear, realistic, sexy, '
        'correct anatomy, natural anatomy, highly detailed, natural skin tone'
    )
    male_underwear.raw_negative_prompt = (
        '(monochrome:1.3), (deformed, distorted, disfigured:1.3), (hair), jeans, wet, '
        'water, shadow, 3d render, cartoon, ((blurry)), duplicate, ((duplicate body parts)), '
        '(disfigured), (poorly drawn), ((missing limbs)), logo, label, signature, text, '
        'words, low res, boring, artifacts, bad art, gross, ugly, poor quality, low quality, '
        'poorly drawn, bad anatomy, wrong anatomy'
    )
    male_underwear.save()

    male_beard = Filter.objects.get(id=7)
    male_beard.raw_prompt = (
        'RAW photo of a man with heavy beard and moustache, realistic, sexy, '
        'correct anatomy, natural anatomy, highly detailed, natural skin tone'
    )
    male_beard.raw_negative_prompt = (
        '(monochrome:1.3), (deformed, distorted, disfigured:1.3), jeans, wet, water, shadow, '
        '3d render, cartoon, ((blurry)), duplicate, ((duplicate body parts)), (disfigured), '
        '(poorly drawn), ((missing limbs)), logo, label, signature, text, words, low res, '
        'boring, artifacts, bad art, gross, ugly, poor quality, low quality, poorly drawn, '
        'bad anatomy, wrong anatomy'
    )
    male_beard.save()

    male_tattoo = Filter.objects.get(id=8)
    male_tattoo.raw_prompt = (
        'RAW photo of a nude man with beautiful sexy tattoo, naked, realistic,'
        ' correct anatomy, natural anatomy, sexy, highly detailed, natural skin tone'
    )
    male_tattoo.raw_negative_prompt = (
        '((clothing)), (monochrome:1.3), (deformed, distorted, disfigured:1.3), (hair), '
        'jeans, wet, water, clothing, shadow, 3d render, cartoon, ((blurry)), duplicate, '
        '((duplicate body parts)), (disfigured), (poorly drawn), ((missing limbs)), logo,'
        ' signature, text, words, low res, boring, artifacts, bad art, gross, ugly, '
        'poor quality, low quality, poorly drawn, bad anatomy, wrong anatomy'
    )
    male_tattoo.save()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('jobs', '0002_custom_migrations'),
    ]

    operations = [
        migrations.RunPython(forwards_func),
    ]
